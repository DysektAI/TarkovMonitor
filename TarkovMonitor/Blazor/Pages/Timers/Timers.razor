@page "/timers"
@using System.Diagnostics
@inject GameWatcher eft
@layout AppLayout
@implements IDisposable

<MudGrid Class="pa-0" Spacing="0">
    <MudItem xs="12">
        <MudPaper Class="pa-2 ma-2 mx-4" Elevation="3">
            <MudText Typo="Typo.h6" Class="d-flex align-center"><MudIcon Icon="@Icons.Material.Filled.Timer" Class="mr-2" />Timers</MudText>
            <MudList T="string">
                <MudListItem>Time In Raid: @TimeInRaidTime</MudListItem>
                <MudListItem>Runthrough Period: @RunThroughRemainingTime</MudListItem>
                <MudListItem>Scav Cooldown: @ScavCooldownTime</MudListItem>
            </MudList>
        </MudPaper>
    </MudItem>
</MudGrid>

@code {

    [CascadingParameter(Name = "AppLayout")]
    public AppLayout AppLayout { get; set; }

    private TimeSpan RunThroughRemainingTime;
    private TimeSpan TimeInRaidTime;
    private TimeSpan ScavCooldownTime;
    private DateTime? RaidStartTime;
    private System.Threading.Timer timerRaid;
    private System.Threading.Timer timerRunThrough;
    private System.Threading.Timer timerScavCooldown;
    private CancellationTokenSource cancellationTokenSource = new();

    protected override void OnInitialized()
    {
        base.OnInitialized();

        RunThroughRemainingTime = Properties.Settings.Default.runthroughTime;
        ScavCooldownTime = TimeSpan.FromSeconds(TarkovDev.ScavCooldownSeconds());

        eft.RaidStarted += Eft_RaidStarted;
        eft.RaidEnded += Eft_RaidEnded;

        timerRaid = new System.Threading.Timer(TimerRaid_Elapsed, null, Timeout.Infinite, 1000);
        timerRunThrough = new System.Threading.Timer(TimerRunThrough_Elapsed, null, Timeout.Infinite, 1000);
        timerScavCooldown = new System.Threading.Timer(timerScanCooldown_Elapsed, null, Timeout.Infinite, 1000);
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        if (firstRender)
        {
            AppLayout.SetTitle("Timers");
        }
    }

    private async void Eft_RaidStarted(object? sender, RaidInfoEventArgs e)
    {
        if (e.RaidInfo.Reconnected)
            return;

        TimeInRaidTime = TimeSpan.Zero;
        RunThroughRemainingTime = Properties.Settings.Default.runthroughTime;

        timerRaid.Change(0, 1000);
        timerRunThrough.Change(0, 1000);

        await InvokeAsync(() => StateHasChanged());
    }

    private async void Eft_RaidEnded(object? sender, RaidInfoEventArgs e)
    {
        RunThroughRemainingTime = TimeSpan.Zero;
        timerRunThrough.Change(Timeout.Infinite, Timeout.Infinite);
        timerRaid.Change(Timeout.Infinite, Timeout.Infinite);

        if (!e.RaidInfo.Reconnected && (e.RaidInfo.RaidType == RaidType.Scav || e.RaidInfo.RaidType == RaidType.PVE))
        {
            timerScavCooldown.Change(0, 1000);
        }

        await InvokeAsync(() => StateHasChanged());
    }

    private async void TimerRaid_Elapsed(object state)
    {
        if (cancellationTokenSource.IsCancellationRequested)
            return;

        TimeInRaidTime += TimeSpan.FromSeconds(1);

        await InvokeAsync(() => StateHasChanged());
    }

    private async void TimerRunThrough_Elapsed(object state)
    {
        if (cancellationTokenSource.IsCancellationRequested)
            return;

        if (RunThroughRemainingTime > TimeSpan.Zero)
        {
            RunThroughRemainingTime -= TimeSpan.FromSeconds(1);
        }
        else
        {
            timerRunThrough.Change(Timeout.Infinite, Timeout.Infinite);
        }

        await InvokeAsync(() => StateHasChanged());
    }

    private async void timerScanCooldown_Elapsed(object state)
    {
        if (cancellationTokenSource.IsCancellationRequested)
            return;

        if (ScavCooldownTime > TimeSpan.Zero)
        {
            ScavCooldownTime -= TimeSpan.FromSeconds(1);
        }
        else
        {
            timerScavCooldown.Change(Timeout.Infinite, Timeout.Infinite);
        }

        await InvokeAsync(() => StateHasChanged());
    }

    // Clean Up Events
    public void Dispose()
    {
        cancellationTokenSource.Cancel();
        cancellationTokenSource.Dispose();

        eft.RaidStarted -= Eft_RaidStarted;
        eft.RaidEnded -= Eft_RaidEnded;

        DisposeTimer(timerRunThrough);
        DisposeTimer(timerRaid);
        DisposeTimer(timerScavCooldown);

    }

    private void DisposeTimer(System.Threading.Timer timer)
    {
        if (timer != null)
        {
            timer.Change(Timeout.Infinite, Timeout.Infinite);
            timer.Dispose();
        }
    }

}
