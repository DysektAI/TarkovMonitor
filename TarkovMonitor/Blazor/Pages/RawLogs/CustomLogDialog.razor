@* 
    CustomLogDialog.razor
    Purpose: This component creates a dialog for entering and processing custom log data in the TarkovMonitor application.
    It allows users to select a log type and input custom log text for processing by the GameWatcher.
*@

@* Dependency injection of the GameWatcher service for handling game logs *@
@inject GameWatcher eft

<MudDialog>
    <DialogContent>
        @* Log Type Selection Dropdown
            - Allows users to choose the type of game log they're inputting
            - Uses MudBlazor's MudSelect component for a material design dropdown
            - The selected value is bound to gameLogType variable
        *@
        <MudSelect @bind-Value="gameLogType" Label="Log type"
            HelperText="This changes the GameWatcher monitor used to process the log"
            OpenIcon="@Icons.Material.Filled.TextSnippet" AdornmentColor="Color.Secondary">
            @* Dynamically generates select options for all GameLogType enum values *@
            @foreach (GameLogType item in Enum.GetValues(typeof(GameLogType)))
            {
                <MudSelectItem Value="@item">@item</MudSelectItem>
            }
        </MudSelect>

        @* Text Input Area
            - Multi-line text field for entering the log data
            - Immediate binding ensures real-time updates
            - Bound to sampleText variable
        *@
        <MudTextField Immediate="true" @bind-Value="@sampleText" T="string" Label="Log Data" Variant="Variant.Outlined"
            Lines="5" Class="mt-4" />
    </DialogContent>

    @* Dialog Action Buttons
        - Cancel: Closes the dialog without processing
        - Submit: Processes the log data and closes dialog
    *@
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit">Submit</MudButton>
    </DialogActions>
</MudDialog>

@code {
    // Dialog instance parameter required for controlling the dialog's behavior
    [CascadingParameter] MudDialogInstance MudDialog { get; set; } = default!;

    // Handles dialog cancellation by calling Cancel on the MudDialog instance
    void Cancel() => MudDialog.Cancel();

    // Stores the user-input log text
    string sampleText = "";

    // Default log type selection, initialized to Application type
    private GameLogType gameLogType = GameLogType.Application;

    /// <summary>
    /// Handles the submission of log data:
    /// 1. Triggers the GameWatcher_NewLogData event with the selected log type and input text
    /// 2. Closes the dialog with a successful result
    /// </summary>
    public void Submit()
    {
        eft.GameWatcher_NewLogData(this, new NewLogDataEventArgs { Type = gameLogType, Data = sampleText });
        MudDialog.Close(DialogResult.Ok(true));
    }
}