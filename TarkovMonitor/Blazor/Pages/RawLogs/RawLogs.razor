@page "/raw"
@using System.Diagnostics
@inject GameWatcher eft
@inject IDialogService DialogService
@layout AppLayout
@implements IDisposable


<MudGrid Class="pa-0" Spacing="0" Style="position:relative;">
	<MudItem xs="12">
        <LogBoard>
        </LogBoard>
    </MudItem>
    @if (DebugMode() || LogsFolderSet())
    {
        <div class="ma-2" style="position:fixed; bottom: 0px; right: 0px;">
            <MudMenu AnchorOrigin="Origin.TopLeft" TransformOrigin="Origin.BottomRight">
                <ActivatorContent>
                    <MudFab Color="Color.Secondary" StartIcon="@Icons.Material.Filled.Add" Size="Size.Small" />
                </ActivatorContent>
                <ChildContent>
                    @if(DebugMode())
                    {
                        <MudMenuItem @onclick="OpenCustomDialog">Custom Log Data</MudMenuItem>
                        <MudMenuItem @onclick="OpenForceReadDialog">Read Previous Logs</MudMenuItem>
                    }
                    @if(LogsFolderSet())
                    {
                        <MudMenuItem @onclick="OpenLogsFolder">Open Logs Folder</MudMenuItem>
                    }
                </ChildContent>
            </MudMenu>
        </div>
    }
</MudGrid>

@code {
    [CascadingParameter(Name="AppLayout")]
    public AppLayout AppLayout { get; set; }

    //private int messageCount = 0;

    private void OpenCustomDialog()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.ExtraLarge, FullWidth = true };
        DialogService.Show<CustomLogDialog>("Process Custom Log Data", options);
    }

    private void OpenForceReadDialog()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.ExtraLarge, FullWidth = true };
        DialogService.Show<ForceReadDialog>("Read Past Log Files", options);
    }

    private void OpenLogsFolder()
    {
        Process.Start("explorer.exe", eft.CurrentLogsFolder);
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        if (firstRender)
        {
            AppLayout.SetTitle("Raw Logs");
        }
    }

    public void Dispose()
    {
    }

    private bool DebugMode()
    {
        return Debugger.IsAttached;
    }

    private bool LogsFolderSet()
    {
        return eft.CurrentLogsFolder != "";
    }
}
