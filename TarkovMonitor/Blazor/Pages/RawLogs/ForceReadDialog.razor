@using Humanizer
@inject MessageLog messageLog

<MudDialog>
    <DialogContent>
        @if (eft.LogsPath != "")
        {
            if (breakpoints != null)
            {
                <MudSelect @bind-Value="selectedBreakpoint" Label="Read previous logs" HelperText="Choose the starting point from which to read logs" OpenIcon="@Icons.Material.Filled.TextSnippet" AdornmentColor="Color.Secondary">
                    @foreach (LogDetails breakpoint in breakpoints)
                    {
                        <MudSelectItem Value="@breakpoint">(@breakpoint.Date.ToLongDateString() - @breakpoint.Date.Humanize()) | @breakpoint.Version | Profile: @breakpoint.ProfileId</MudSelectItem>
                    }
                </MudSelect>
                <p>Select a starting point to read previous logs and update your quest progress. All logs from that point forward with the same profile ID will be read and that cumulative progress will be synced to Tarkov Tracker.</p>
                <p><strong>WARNING: </strong>You can mess up your Tarkov Tracker saved quest progress if you pick an invalid starting date, so proceed with caution.</p>
            }
            else
            {
                <MudProgressCircular Color="Color.Info" Indeterminate="true" />
            }
            
        }
        else
        {
            <span>Could not find the Escape From Tarkov installation location, or no logs exist.</span>
        }
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit">Ok</MudButton>
    </DialogActions>
</MudDialog>
@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    internal GameWatcher eft = new();
    LogDetails? selectedBreakpoint;
    List<LogDetails>? breakpoints;
    Dictionary<string, TarkovMonitor.TaskStatus> TaskStatuses = new();

    protected override void OnInitialized()
    {
        base.OnInitialized();
        try
        {
            eft.SetLogsPath();
        }
        catch (Exception ex)
        {
            messageLog.AddMessage($"Error setting game logs path: {ex.Message} {ex.StackTrace}", "exception");
        }
        Task.Run(() =>
        {
            breakpoints = eft.GetLogBreakpoints();
            InvokeAsync(() => StateHasChanged());
        });
    }

    void Cancel() => MudDialog.Cancel();

    public async void Submit()
    {
        // Check if a path was selected, and if so, load the logs from that path
        if (selectedBreakpoint == null)
        {
            return;
        }
        if (!TarkovTracker.ValidToken)
        {
            messageLog.AddMessage("You must have a valid Tarkov Tracker API token to read past logs.", "exception");
        }
        TaskStatuses.Clear();
        //eft.ProcessLogs(selectedPath);
        eft.TaskModified += UpdateTaskStatus;
        eft.ProcessLogsFromBreakpoint(selectedBreakpoint);
        eft.TaskModified -= UpdateTaskStatus;
        Dictionary<string, TarkovMonitor.TaskStatus> updateTasks = new();
        foreach (var kvp in TaskStatuses)
        {
            if (kvp.Value == TarkovMonitor.TaskStatus.Started)
            {
                // don't update task status if started
                continue;
            }
            var task = TarkovDev.Tasks.Find((t) => t.id == kvp.Key);
            if (task == null)
            {
                // probably a daily
                continue;
            }
            TarkovMonitor.TaskStatus savedTaskStatus = TarkovMonitor.TaskStatus.None;
            var taskProgress = TarkovTracker.Progress.data.tasksProgress.Find((prog) => prog.id == kvp.Key);
            if (taskProgress != null)
            {
                if (taskProgress.failed)
                {
                    savedTaskStatus = TarkovMonitor.TaskStatus.Failed;
                }
                if (taskProgress.complete)
                {
                    savedTaskStatus = TarkovMonitor.TaskStatus.Finished;
                }
            }
            if (kvp.Value == savedTaskStatus)
            {
                // status matches, so don't update
                continue;
            }
            updateTasks.Add(kvp.Key, kvp.Value);
            //System.Diagnostics.Debug.WriteLine($"Task {kvp.Key} should be {kvp.Value}");
            messageLog.AddMessage($"{kvp.Value} task {task.name}", "quest", $"https://tarkov.dev/task/{task.normalizedName}");
        }
        try
        {
            if (updateTasks.Count > 0)
            {
                await TarkovTracker.SetTaskStatuses(updateTasks);
                messageLog.AddMessage($"Updated status of {updateTasks.Count} tasks in Tarkov Tracker.", "info");
            }
            else
            {
                messageLog.AddMessage("No tasks found in past logs that require updating in Tarkov Tracker.", "info");
            }
            MudDialog.Close(DialogResult.Ok(true));
        }
        catch (Exception ex)
        {
            messageLog.AddMessage(ex.Message, "exception");
        }
    }

    private void UpdateTaskStatus(object? sender, TaskStatusMessageEventArgs e)
    {
        TaskStatuses[e.TaskId] = e.Status;
    }
}