@using Humanizer

<MudDialog>
    <DialogContent>
        @if (eft.LogsPath != "")
        {
        <MudSelect @bind-Value="selectedBreakpoint" Label="Read previous logs" HelperText="Choose the starting point from which to read logs" OpenIcon="@Icons.Material.Filled.TextSnippet" AdornmentColor="Color.Secondary">
            @foreach (LogDetails breakpoint in breakpoints)
            {
                    <MudSelectItem Value="@breakpoint">(@breakpoint.Date.ToLongDateString() - @breakpoint.Date.Humanize()) | @breakpoint.Version | Profile: @breakpoint.ProfileId</MudSelectItem>
            }
        </MudSelect>
        }
        else
        {
            <span>Could not find the Escape From Tarkov installation location, or no logs exist.</span>
        }
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit">Ok</MudButton>
    </DialogActions>
</MudDialog>
@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    internal GameWatcher eft = new();

    protected override void OnInitialized()
    {
        base.OnInitialized();
        breakpoints = eft.GetLogBreakpoints();
    }

    LogDetails selectedBreakpoint;

    List<LogDetails> breakpoints = new();
    Dictionary<string, TarkovMonitor.TaskStatus> TaskStatuses = new();

    void Cancel() => MudDialog.Cancel();

    public void Submit()
    {
        // Check if a path was selected, and if so, load the logs from that path
        if (selectedBreakpoint != null)
        {
            TaskStatuses.Clear();
            //eft.ProcessLogs(selectedPath);
            eft.TaskModified += UpdateTaskStatus;
            eft.ProcessLogsFromBreakpoint(selectedBreakpoint);
            eft.TaskModified -= UpdateTaskStatus;
            foreach (var kvp in TaskStatuses)
            {
                if (kvp.Value == TarkovMonitor.TaskStatus.Started)
                {
                    // don't update task status if started
                    continue;
                }
                var task = TarkovDev.Tasks.Find((t) => t.id == kvp.Key);
                if (task == null)
                {
                    // probably a daily
                    continue;
                }
                TarkovMonitor.TaskStatus savedTaskStatus = TarkovMonitor.TaskStatus.None;
                var taskProgress = TarkovTracker.Progress.data.tasksProgress.Find((prog) => prog.id == kvp.Key);
                if (taskProgress != null)
                {
                    if (taskProgress.failed)
                    {
                        savedTaskStatus = TarkovMonitor.TaskStatus.Failed;
                    }
                    if (taskProgress.complete)
                    {
                        savedTaskStatus = TarkovMonitor.TaskStatus.Finished;
                    }
                }
                if (kvp.Value == savedTaskStatus)
                {
                    // status matches, so don't update
                    continue;
                }
                if (kvp.Value == TarkovMonitor.TaskStatus.Finished)
                {
                    //TarkovTracker.SetTaskComplete(kvp.Key);
                    System.Diagnostics.Debug.WriteLine($"Task {kvp.Key} should be complete");
                }
                if (kvp.Value == TarkovMonitor.TaskStatus.Failed)
                {
                    //TarkovTracker.SetTaskFailed(kvp.Key);
                    System.Diagnostics.Debug.WriteLine($"Task {kvp.Key} should be failed");
                }
            }
        }
        MudDialog.Close(DialogResult.Ok(true));
    }

    private void UpdateTaskStatus(object sender, TaskStatusMessageEventArgs e)
    {
        TaskStatuses[e.TaskId] = e.Status;
    }
}