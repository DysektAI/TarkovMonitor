@page "/stats"
@* Imports required for functionality *@
@using System.Diagnostics
@using NAudio.Wave

@* Dependency injection for required services *@
@inject GameWatcher eft
@inject MessageLog messageLog
@inject IDialogService DialogService
@layout AppLayout
@implements IDisposable

@* Main grid layout container *@
<MudGrid Class="pa-0" Spacing="0">
    @* Flea Market Sales Section *@
    <MudItem xs="12">
        <MudPaper Class="pa-2 ma-2 mx-4" Elevation="3">
            @* Header for Flea Market sales with ruble icon *@
            <MudText Typo="Typo.h6" Class="d-flex align-center">
                <MudIcon Icon="@Icons.Material.Filled.CurrencyRuble" Class="mr-2" />Flea Market Sales
            </MudText>
            @* Iterate through available currencies to display sales in each currency *@
            @foreach (KeyValuePair<string, string> currency in Currencies)
            {
                <MudText Typo="Typo.body2">@GetSales(currency.Key, currency.Value)</MudText>
            }
        </MudPaper>
    </MudItem>

    @* Raid Statistics Section *@
    <MudItem xs="12">
        <MudPaper Class="pa-2 ma-2 mx-4" Elevation="3">
            @* Header for raid statistics with map icon *@
            <MudText Typo="Typo.h6" Class="d-flex align-center">
                <MudIcon Icon="@Icons.Material.Filled.Map" Class="mr-2" />Raids
            </MudText>
            @* Display raid count for each available map *@
            @foreach (var map in TarkovDev.Maps)
            {
                <MudText Typo="Typo.body2">@map.Name: @GetRaidCount(map.NameId)</MudText>
            }
        </MudPaper>
        @* Commented out chart component for potential future use *@
        @*<MudChart ChartType="ChartType.StackedBar" ChartSeries="@Series" XAxisLabels="@XAxisLabels" Width="100%" Height="350px"></MudChart>*@
    </MudItem>

    @* Data Management Section *@
    <MudItem xs="12">
        <MudPaper Class="pa-2 ma-2 mx-4" Elevation="3">
            <MudButton @onclick="ClearData" Variant="Variant.Text" Color="Color.Info">Clear Data</MudButton>
        </MudPaper>
    </MudItem>
</MudGrid>

@code {
    @* Commented out chart configuration for potential future implementation *@
    /*public List<ChartSeries> Series = new List<ChartSeries>()
    {
    new ChartSeries() { Name = "PMC", Data = TarkovMonitor.Stats.GetTotalRaidsPerMap(RaidType.PMC).Values.ToArray().Select(n
    => (double)n).ToArray() },
    new ChartSeries() { Name = "Scav", Data =
    TarkovMonitor.Stats.GetTotalRaidsPerMap(RaidType.Scav).Values.ToArray().Select(n => (double)n).ToArray() },
    };
    public string[] XAxisLabels = TarkovDev.Maps.Select(m => m.Name).ToArray();*/

    [CascadingParameter(Name = "AppLayout")]
    public AppLayout AppLayout { get; set; } = null!;

    protected override void OnInitialized()
    {
        base.OnInitialized();
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        if (firstRender)
        {
            AppLayout.SetTitle("Stats");
        }
    }

    public void Dispose()
    {
    }

    private Dictionary<string, string> Currencies = new()
{
{ "5449016a4bdc2d6f028b456f", "ru-RU" },
//{ "5696686a4bdc2da3298b456a", "en-US" },
//{ "569668774bdc2da2298b4568", "de-DE" },
};

    private RenderFragment GetSales(string currId, string formatCode)
    {
        return (builder) =>
        {
            builder.AddContent(0, TarkovMonitor.Stats.GetTotalSales(currId).ToString("C0",
    System.Globalization.CultureInfo.CreateSpecificCulture(formatCode)));
        };
    }

    private RenderFragment GetRaidCount(string mapNameId)
    {
        return (builder) =>
        {
            builder.AddContent(0, TarkovMonitor.Stats.GetTotalRaids(mapNameId).ToString());
        };
    }

    private void ClearData()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.ExtraLarge, FullWidth = true };
        DialogService.Show<ConfirmClearDataDialog>("Clear Data?", options);
    }
}
